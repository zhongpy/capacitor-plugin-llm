{"version":3,"file":"web.js","sourceRoot":"","sources":["../../src/web.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,iBAAiB,CAAC;AAU5C,MAAM,OAAO,MAAO,SAAQ,SAAS;IAGnC;QACE,KAAK,EAAE,CAAC;IACV,CAAC;IAED,KAAK,CAAC,IAAI,CAAC,QAAqB;QAC9B,2CAA2C;QAC3C,OAAO;IACT,CAAC;IAED,KAAK,CAAC,IAAI,CAAC,OAAoB;QAC7B,2BAA2B;QAC3B,MAAM,IAAI,GAAG,iBAAiB,OAAO,CAAC,MAAM,EAAE,CAAC;QAC/C,IAAI,CAAC,KAAK,GAAG,IAAI,eAAe,EAAE,CAAC;QAEnC,KAAK,MAAM,EAAE,IAAI,IAAI,EAAE;YACrB,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO;gBAAE,MAAM;YACrC,MAAM,IAAI,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YACzC,IAAI,CAAC,eAAe,CAAC,UAAU,EAAE,EAAE,KAAK,EAAE,EAAE,EAAmB,CAAC,CAAC;SAClE;QACD,IAAI,CAAC,eAAe,CAAC,SAAS,EAAE,EAAkB,CAAC,CAAC;IACtD,CAAC;IAED,KAAK,CAAC,IAAI;;QACR,MAAA,IAAI,CAAC,KAAK,0CAAE,KAAK,GAAG;IACtB,CAAC;IAED,KAAK,CAAC,IAAI;QACR,gBAAgB;QAChB,OAAO;IACT,CAAC;IAED,KAAK,CAAC,aAAa,CAAC,OAA6B;;QAC/C,MAAM,KAAK,SAAG,OAAO,CAAC,KAAK,mCAAI,UAAU,CAAC;QAC1C,MAAM,GAAG,SAAG,OAAO,CAAC,UAAU,mCAAI,GAAG,CAAC;QACtC,UAAU;QACV,OAAO,EAAE,IAAI,EAAE,uBAAuB,KAAK,MAAM,GAAG,SAAS,EAAE,CAAC;IAClE,CAAC;CACF;AAED,eAAe,MAAM,CAAC","sourcesContent":["import { WebPlugin } from '@capacitor/core';\nimport type {\n  LLMPlugin,\n  InitOptions,\n  ChatOptions,\n  GenerateEssayOptions,\n  LLMTokenEvent,\n  LLMDoneEvent,\n} from './definitions';\n\nexport class LLMWeb extends WebPlugin implements LLMPlugin {\n  private abort?: AbortController;\n\n  constructor() {\n    super();\n  }\n\n  async init(_options: InitOptions): Promise<void> {\n    // Web 端不做本地模型管理；如需接云端，可在此保存 endpoint/key 等\n    return;\n  }\n\n  async chat(options: ChatOptions): Promise<void> {\n    // 这里提供一个非常简易的“模拟流式”以保证前端联调\n    const text = `[LLMWeb mock] ${options.prompt}`;\n    this.abort = new AbortController();\n\n    for (const ch of text) {\n      if (this.abort.signal.aborted) break;\n      await new Promise(r => setTimeout(r, 8));\n      this.notifyListeners('llmToken', { token: ch } as LLMTokenEvent);\n    }\n    this.notifyListeners('llmDone', {} as LLMDoneEvent);\n  }\n\n  async stop(): Promise<void> {\n    this.abort?.abort();\n  }\n\n  async free(): Promise<void> {\n    // no-op for web\n    return;\n  }\n\n  async generateEssay(options: GenerateEssayOptions): Promise<{ text: string }> {\n    const title = options.title ?? 'An Essay';\n    const len = options.word_limit ?? 200;\n    // 纯前端占位返回\n    return { text: `[LLMWeb mock essay] ${title} (~${len} words)` };\n  }\n}\n\nexport default LLMWeb;\n"]}